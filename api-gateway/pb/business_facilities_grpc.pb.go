// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BusinessFacilitiesClient is the client API for BusinessFacilities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessFacilitiesClient interface {
	AddBusinessFacility(ctx context.Context, in *AddBFRequest, opts ...grpc.CallOption) (*BFResponse, error)
	GetBusinessFacilities(ctx context.Context, in *GetBFRequests, opts ...grpc.CallOption) (*BFResponses, error)
	GetBusinessFacility(ctx context.Context, in *GetBFRequest, opts ...grpc.CallOption) (*BFResponse, error)
	UpdateBusinessFacility(ctx context.Context, in *UpdateBFRequest, opts ...grpc.CallOption) (*BFResponse, error)
	DeleteBusinessFacility(ctx context.Context, in *DeleteBFRequest, opts ...grpc.CallOption) (*BFResponse, error)
}

type businessFacilitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessFacilitiesClient(cc grpc.ClientConnInterface) BusinessFacilitiesClient {
	return &businessFacilitiesClient{cc}
}

func (c *businessFacilitiesClient) AddBusinessFacility(ctx context.Context, in *AddBFRequest, opts ...grpc.CallOption) (*BFResponse, error) {
	out := new(BFResponse)
	err := c.cc.Invoke(ctx, "/business_facilities.BusinessFacilities/AddBusinessFacility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessFacilitiesClient) GetBusinessFacilities(ctx context.Context, in *GetBFRequests, opts ...grpc.CallOption) (*BFResponses, error) {
	out := new(BFResponses)
	err := c.cc.Invoke(ctx, "/business_facilities.BusinessFacilities/GetBusinessFacilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessFacilitiesClient) GetBusinessFacility(ctx context.Context, in *GetBFRequest, opts ...grpc.CallOption) (*BFResponse, error) {
	out := new(BFResponse)
	err := c.cc.Invoke(ctx, "/business_facilities.BusinessFacilities/GetBusinessFacility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessFacilitiesClient) UpdateBusinessFacility(ctx context.Context, in *UpdateBFRequest, opts ...grpc.CallOption) (*BFResponse, error) {
	out := new(BFResponse)
	err := c.cc.Invoke(ctx, "/business_facilities.BusinessFacilities/UpdateBusinessFacility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessFacilitiesClient) DeleteBusinessFacility(ctx context.Context, in *DeleteBFRequest, opts ...grpc.CallOption) (*BFResponse, error) {
	out := new(BFResponse)
	err := c.cc.Invoke(ctx, "/business_facilities.BusinessFacilities/DeleteBusinessFacility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessFacilitiesServer is the server API for BusinessFacilities service.
// All implementations must embed UnimplementedBusinessFacilitiesServer
// for forward compatibility
type BusinessFacilitiesServer interface {
	AddBusinessFacility(context.Context, *AddBFRequest) (*BFResponse, error)
	GetBusinessFacilities(context.Context, *GetBFRequests) (*BFResponses, error)
	GetBusinessFacility(context.Context, *GetBFRequest) (*BFResponse, error)
	UpdateBusinessFacility(context.Context, *UpdateBFRequest) (*BFResponse, error)
	DeleteBusinessFacility(context.Context, *DeleteBFRequest) (*BFResponse, error)
	mustEmbedUnimplementedBusinessFacilitiesServer()
}

// UnimplementedBusinessFacilitiesServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessFacilitiesServer struct {
}

func (UnimplementedBusinessFacilitiesServer) AddBusinessFacility(context.Context, *AddBFRequest) (*BFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessFacility not implemented")
}
func (UnimplementedBusinessFacilitiesServer) GetBusinessFacilities(context.Context, *GetBFRequests) (*BFResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessFacilities not implemented")
}
func (UnimplementedBusinessFacilitiesServer) GetBusinessFacility(context.Context, *GetBFRequest) (*BFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessFacility not implemented")
}
func (UnimplementedBusinessFacilitiesServer) UpdateBusinessFacility(context.Context, *UpdateBFRequest) (*BFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessFacility not implemented")
}
func (UnimplementedBusinessFacilitiesServer) DeleteBusinessFacility(context.Context, *DeleteBFRequest) (*BFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessFacility not implemented")
}
func (UnimplementedBusinessFacilitiesServer) mustEmbedUnimplementedBusinessFacilitiesServer() {}

// UnsafeBusinessFacilitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessFacilitiesServer will
// result in compilation errors.
type UnsafeBusinessFacilitiesServer interface {
	mustEmbedUnimplementedBusinessFacilitiesServer()
}

func RegisterBusinessFacilitiesServer(s grpc.ServiceRegistrar, srv BusinessFacilitiesServer) {
	s.RegisterService(&BusinessFacilities_ServiceDesc, srv)
}

func _BusinessFacilities_AddBusinessFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessFacilitiesServer).AddBusinessFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_facilities.BusinessFacilities/AddBusinessFacility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessFacilitiesServer).AddBusinessFacility(ctx, req.(*AddBFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessFacilities_GetBusinessFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBFRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessFacilitiesServer).GetBusinessFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_facilities.BusinessFacilities/GetBusinessFacilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessFacilitiesServer).GetBusinessFacilities(ctx, req.(*GetBFRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessFacilities_GetBusinessFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessFacilitiesServer).GetBusinessFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_facilities.BusinessFacilities/GetBusinessFacility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessFacilitiesServer).GetBusinessFacility(ctx, req.(*GetBFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessFacilities_UpdateBusinessFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessFacilitiesServer).UpdateBusinessFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_facilities.BusinessFacilities/UpdateBusinessFacility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessFacilitiesServer).UpdateBusinessFacility(ctx, req.(*UpdateBFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessFacilities_DeleteBusinessFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessFacilitiesServer).DeleteBusinessFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/business_facilities.BusinessFacilities/DeleteBusinessFacility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessFacilitiesServer).DeleteBusinessFacility(ctx, req.(*DeleteBFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessFacilities_ServiceDesc is the grpc.ServiceDesc for BusinessFacilities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessFacilities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "business_facilities.BusinessFacilities",
	HandlerType: (*BusinessFacilitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBusinessFacility",
			Handler:    _BusinessFacilities_AddBusinessFacility_Handler,
		},
		{
			MethodName: "GetBusinessFacilities",
			Handler:    _BusinessFacilities_GetBusinessFacilities_Handler,
		},
		{
			MethodName: "GetBusinessFacility",
			Handler:    _BusinessFacilities_GetBusinessFacility_Handler,
		},
		{
			MethodName: "UpdateBusinessFacility",
			Handler:    _BusinessFacilities_UpdateBusinessFacility_Handler,
		},
		{
			MethodName: "DeleteBusinessFacility",
			Handler:    _BusinessFacilities_DeleteBusinessFacility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "business_facilities.proto",
}

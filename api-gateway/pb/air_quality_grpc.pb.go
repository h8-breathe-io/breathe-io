// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirQualityServiceClient is the client API for AirQualityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirQualityServiceClient interface {
	GetAirQualities(ctx context.Context, in *GetAirQualitiesRequest, opts ...grpc.CallOption) (*GetAirQualitiesResponse, error)
	SaveAirQualities(ctx context.Context, in *SaveAirQualitiesRequest, opts ...grpc.CallOption) (*SaveAirQualitiesResponse, error)
	SaveHistoricalAirQualities(ctx context.Context, in *SaveHistoricalAirQualitiesRequest, opts ...grpc.CallOption) (*SaveAirQualitiesResponse, error)
	GetAirQualityByID(ctx context.Context, in *GetAirQualityByIDReq, opts ...grpc.CallOption) (*GetAirQualityByIDResp, error)
}

type airQualityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirQualityServiceClient(cc grpc.ClientConnInterface) AirQualityServiceClient {
	return &airQualityServiceClient{cc}
}

func (c *airQualityServiceClient) GetAirQualities(ctx context.Context, in *GetAirQualitiesRequest, opts ...grpc.CallOption) (*GetAirQualitiesResponse, error) {
	out := new(GetAirQualitiesResponse)
	err := c.cc.Invoke(ctx, "/air_quality_grpc.AirQualityService/GetAirQualities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualityServiceClient) SaveAirQualities(ctx context.Context, in *SaveAirQualitiesRequest, opts ...grpc.CallOption) (*SaveAirQualitiesResponse, error) {
	out := new(SaveAirQualitiesResponse)
	err := c.cc.Invoke(ctx, "/air_quality_grpc.AirQualityService/SaveAirQualities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualityServiceClient) SaveHistoricalAirQualities(ctx context.Context, in *SaveHistoricalAirQualitiesRequest, opts ...grpc.CallOption) (*SaveAirQualitiesResponse, error) {
	out := new(SaveAirQualitiesResponse)
	err := c.cc.Invoke(ctx, "/air_quality_grpc.AirQualityService/SaveHistoricalAirQualities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualityServiceClient) GetAirQualityByID(ctx context.Context, in *GetAirQualityByIDReq, opts ...grpc.CallOption) (*GetAirQualityByIDResp, error) {
	out := new(GetAirQualityByIDResp)
	err := c.cc.Invoke(ctx, "/air_quality_grpc.AirQualityService/GetAirQualityByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirQualityServiceServer is the server API for AirQualityService service.
// All implementations must embed UnimplementedAirQualityServiceServer
// for forward compatibility
type AirQualityServiceServer interface {
	GetAirQualities(context.Context, *GetAirQualitiesRequest) (*GetAirQualitiesResponse, error)
	SaveAirQualities(context.Context, *SaveAirQualitiesRequest) (*SaveAirQualitiesResponse, error)
	SaveHistoricalAirQualities(context.Context, *SaveHistoricalAirQualitiesRequest) (*SaveAirQualitiesResponse, error)
	GetAirQualityByID(context.Context, *GetAirQualityByIDReq) (*GetAirQualityByIDResp, error)
	mustEmbedUnimplementedAirQualityServiceServer()
}

// UnimplementedAirQualityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirQualityServiceServer struct {
}

func (UnimplementedAirQualityServiceServer) GetAirQualities(context.Context, *GetAirQualitiesRequest) (*GetAirQualitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirQualities not implemented")
}
func (UnimplementedAirQualityServiceServer) SaveAirQualities(context.Context, *SaveAirQualitiesRequest) (*SaveAirQualitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAirQualities not implemented")
}
func (UnimplementedAirQualityServiceServer) SaveHistoricalAirQualities(context.Context, *SaveHistoricalAirQualitiesRequest) (*SaveAirQualitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveHistoricalAirQualities not implemented")
}
func (UnimplementedAirQualityServiceServer) GetAirQualityByID(context.Context, *GetAirQualityByIDReq) (*GetAirQualityByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirQualityByID not implemented")
}
func (UnimplementedAirQualityServiceServer) mustEmbedUnimplementedAirQualityServiceServer() {}

// UnsafeAirQualityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirQualityServiceServer will
// result in compilation errors.
type UnsafeAirQualityServiceServer interface {
	mustEmbedUnimplementedAirQualityServiceServer()
}

func RegisterAirQualityServiceServer(s grpc.ServiceRegistrar, srv AirQualityServiceServer) {
	s.RegisterService(&AirQualityService_ServiceDesc, srv)
}

func _AirQualityService_GetAirQualities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirQualitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityServiceServer).GetAirQualities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/air_quality_grpc.AirQualityService/GetAirQualities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityServiceServer).GetAirQualities(ctx, req.(*GetAirQualitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualityService_SaveAirQualities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAirQualitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityServiceServer).SaveAirQualities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/air_quality_grpc.AirQualityService/SaveAirQualities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityServiceServer).SaveAirQualities(ctx, req.(*SaveAirQualitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualityService_SaveHistoricalAirQualities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveHistoricalAirQualitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityServiceServer).SaveHistoricalAirQualities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/air_quality_grpc.AirQualityService/SaveHistoricalAirQualities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityServiceServer).SaveHistoricalAirQualities(ctx, req.(*SaveHistoricalAirQualitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualityService_GetAirQualityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirQualityByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualityServiceServer).GetAirQualityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/air_quality_grpc.AirQualityService/GetAirQualityByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualityServiceServer).GetAirQualityByID(ctx, req.(*GetAirQualityByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AirQualityService_ServiceDesc is the grpc.ServiceDesc for AirQualityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirQualityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "air_quality_grpc.AirQualityService",
	HandlerType: (*AirQualityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAirQualities",
			Handler:    _AirQualityService_GetAirQualities_Handler,
		},
		{
			MethodName: "SaveAirQualities",
			Handler:    _AirQualityService_SaveAirQualities_Handler,
		},
		{
			MethodName: "SaveHistoricalAirQualities",
			Handler:    _AirQualityService_SaveHistoricalAirQualities_Handler,
		},
		{
			MethodName: "GetAirQualityByID",
			Handler:    _AirQualityService_GetAirQualityByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "air_quality.proto",
}
